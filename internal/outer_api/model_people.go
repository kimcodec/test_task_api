/*
Car info

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// People struct for People
type People struct {
	Name string `json:"name"`
	Surname string `json:"surname"`
	Patronymic *string `json:"patronymic,omitempty"`
}

// NewPeople instantiates a new People object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeople(name string, surname string) *People {
	this := People{}
	this.Name = name
	this.Surname = surname
	return &this
}

// NewPeopleWithDefaults instantiates a new People object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleWithDefaults() *People {
	this := People{}
	return &this
}

// GetName returns the Name field value
func (o *People) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *People) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *People) SetName(v string) {
	o.Name = v
}

// GetSurname returns the Surname field value
func (o *People) GetSurname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value
// and a boolean to check if the value has been set.
func (o *People) GetSurnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Surname, true
}

// SetSurname sets field value
func (o *People) SetSurname(v string) {
	o.Surname = v
}

// GetPatronymic returns the Patronymic field value if set, zero value otherwise.
func (o *People) GetPatronymic() string {
	if o == nil || o.Patronymic == nil {
		var ret string
		return ret
	}
	return *o.Patronymic
}

// GetPatronymicOk returns a tuple with the Patronymic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *People) GetPatronymicOk() (*string, bool) {
	if o == nil || o.Patronymic == nil {
		return nil, false
	}
	return o.Patronymic, true
}

// HasPatronymic returns a boolean if a field has been set.
func (o *People) HasPatronymic() bool {
	if o != nil && o.Patronymic != nil {
		return true
	}

	return false
}

// SetPatronymic gets a reference to the given string and assigns it to the Patronymic field.
func (o *People) SetPatronymic(v string) {
	o.Patronymic = &v
}

func (o People) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["surname"] = o.Surname
	}
	if o.Patronymic != nil {
		toSerialize["patronymic"] = o.Patronymic
	}
	return json.Marshal(toSerialize)
}

type NullablePeople struct {
	value *People
	isSet bool
}

func (v NullablePeople) Get() *People {
	return v.value
}

func (v *NullablePeople) Set(val *People) {
	v.value = val
	v.isSet = true
}

func (v NullablePeople) IsSet() bool {
	return v.isSet
}

func (v *NullablePeople) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeople(val *People) *NullablePeople {
	return &NullablePeople{value: val, isSet: true}
}

func (v NullablePeople) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeople) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


